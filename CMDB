问你们CMDB做的什么东西呀？我们当时很原始的，什么都没有乱七八糟的，有的写在本上的、有的是存在Mysql数据库的、甚至有的用临时存、还有用Excel的最多了这么乱怎么办呢？找了几个同事我们说这个东西一定要管理起来，不然管理不方便，然后我们就开始考虑怎么写了，我们最熟悉的就是python了，然我们搞个DB设计也搞不出来，怎么办呢？我们就基于我们的Mysql来搞。我们用Mysql刚开始是要做设计的，我先建了一些主机表把主机管理起来了，感觉东西少，然后我们还管理一些路由器，后来其它同事说他也有些硬件资产需要管理在建两张表，这是我们最原始的建设方式，我们建了十来张表把这些资产都管理起来了，用的也挺好的，起码我们查起来方便多了。但是问题来了，有同事说某个IP需要迁移到另一台机器上去，这就麻烦了，IP在一个小范围内它是唯一的，IP迁移之后它是一个IP池的管理，我们当时都没考虑这东西，我们就是记资产都没把IP当它是资产，后来我们又把IP引进来了，因为IP你用了，别人就不能用了，不然在一个范围之内就冲突了。

　　用传统的方式把这些一个一个表建起来没有问题，但是我们立即就通过分析就已经发现了资产多样性，你无法用数据库的设计很好的表达出来，无法扩展，所以就很难适应需求，甚至说现在的表设计很难改动，添字段还好说，字段改动的时候要删字段(一般不建议删，哪怕弃用也要保留着，但是保留的多了就不好看了，在逻辑上已经删除了，实际上表还在，一个表一打开一百多个字段，有50个字段都弃用不用了(因为这套系统转了七八手了，都没留下文档，然后面人去改，这个字段又不管动，就又添字段，前面的字段在代码中就没人敢用了，就成了沉睡的逻辑被删除的字段了，没人用的字段很可怕的))

　　我们在做资产管理第一个原始版本产生的时候，我们没有考虑那么多扩展，先应用当前需求，它一旦要扩展的时候，这种架构根本就不合适了。
  
  
阿斯蒂芬



1、在设计的时候考虑到管理信息不可控，传统设计方式不是多表就是多字段，扩展性极差，而且大量字段冗余没法每张表一个字段这是传统表带来的一些问题
  在表设计的时候要加保留字段，以防资产管理信息量不可控，增加字段，表小没事儿，一个大数据表要做增加字段或者修改的话那就是灾难性的后果。

　我们很难做到一次性将字段设计的很完善，就算设计的很完善，你会发现有些字段根本不想用，但是后期可能要用现在不想用，你要么就是过度设计了，一些字
  段全是空的，你要么就是设计漏了，还有一些字段没有设计到，CMDB提供不出来，这都是问题。目前来看增删字段不自由

　我们现在需求小解决主机的管理，解决下交换机的管理，那要上架个路由器呢？硬件管理要不要把他们放在一个表中，虚拟机要不要记录，要不要加到资产里面去，虚拟机
  消亡太快了，跟我们传统认为的不一样，那就别要它了，但是也有虚拟机一开半年的，需要记录它已经分配的IP，IP唯一的要不要单独管理生成一张表，这样管理资产很
  多都单独建表么？那需要建多少张表合适? 如果全部建一张表，多少个字段合适，管理成千上万的资源，字段名字怎么起合适？字段大小也不样。
  建一个表不合适，建N个表也不合适。这时候就需要用到CMDB了。

　　比如你去淘宝像这种网站，点开规格的时候其实就已经类似于这种设计了，可以认为每一种产品就是一种资产，不同型号的产品都是一种资产，这得设计多少张表来
    描述这些资产？然而一张表是不够的，手机的规格跟电视机是不一样的，它们的属性都不一样，字段如何设计？每个产品一张表那换一种型号要添怎么办临时加字段？
    留保留字段留多少合适?这都是问题。

　　所以说对于这种变化极大的数据想存储管理是很麻烦的事情。

通过简单的设计是可以解决眼前的问题，但是在我们可以想到的范围之内，发现这种设计带来了很大的问题，1、字段真的没法控制了，不但增加字段甚至还要减少字段。
然后管理资产越多表就会变的越来越多根本不可控的。所以传统设计扩展性极差，而且大量字段冗余，没办法每张表一个字段这就是传统表带来的一些问题。

2、纯粹的CMDB是存储、管理、资产信息，项目基于Mysql之上实现虚拟DB数据存储。
  狭义上讲：纯粹的CMDB是专门存储、管理、资产信息，往往围绕着资产，在资产的利用上扩展出更多的功能。
  宽泛意义指的是有很多子系统，每个子系统都有他相关的业务，在一个数据库中是分开建表的，CMDB是它最核心的资产相关的表，然后就是个个业务用的数据表，
  每个子系统用自己的业务表如果需要用到资产在访问资产就行了。这就是外面宽泛指的CMDB，各种子系统及资产表和业务表，他这些东西打包在一起卖，
  这东西叫CMDB(管理系统)。
  
  
3、Schema表描述所有逻辑表，而逻辑表的字段存储在Field表，Schema+Field构建出一张张逻辑表。
  按以前来说新增资产要在建一张表，对现在来讲只需要在schema中增加字段就行了，如果一张表20个字段就得思考是不是设计多了，有些不常用的字段搬出去放到
  另一张表里不要放在同一张表里，通过这样的设计就可以实现可以动态变化的表。

　　我们考虑过多对多的模型，但是发现以后可能会非常复杂，所以这块儿我们就考虑设计成一对多的关系，有以上字段，以后用这些字段可以对schema表进行一些字
  段扩展，可以随意增加字段，这种增加字段成本很小，相当于增加一条记录，对比之前设计的host表增加字段成本大，消耗资源多，要么预留备用字段，要么就少添
  字段，绝不允许事后在线上系统随时要添字段，这一添字段整个表会被锁住的而且会引起很大的IO消耗(整个数据库面临瘫痪的风险，如果这张表还是核心数据表，大
  家都要引用它的数据的话，基本上整个数据库就没法工作了)，所以这种事儿要少做。
  
  在前面计中发现描述资产是非常麻烦的事情，不同资产或的不同型号，就有着不同的属性和值。你都的记录，这个时候发现传统设计会带来各种各样的问题，很难在
  一张表中能够设计固定字段个数来满足经常变动的需求，所以我们考虑到这一点，我们就把原来的一张张表给拆了，拆成两张表来描述它这种虚拟表，一张叫schema
  一张叫field，schema中之描述表是谁，field里面只描述这个表里面到底有哪些字段，field表里面实际可以动态添加的，以后要加属性只需要在field表中增加一
  条记录描述，这就是它的灵活之处。我们就使用schema + field当然它中间通过外键约束建立这种关系，我们就可以清楚看到它实际上构成了一张张虚拟的表。
  就达到了我们动态增加表或者增加字段的需求。
  
  
4、Entity存储记录逻辑表对应的字段，Value表来记录字段值，Entity+Value存储记录逻辑表对应的一条条数据。
  假设schema.id=1叫主机，它又设计了两个字段，一个字段叫IP，一个字段叫hostname，但是现在有个虚拟表叫host表，我现在让你给我存一条主机信息进去往那存啊？
  在这两张表中定义与数据混在一起那不合适，所以这个时候我们就需要在建表，建个什么表呢？假设我们把一条条数据称为一条条记录我们称为一个个实体，因为记
  一个主机为一个资产，这个资产就认为是一个实体。
  
  
  
  
为什么从上家公司离职：
  公司发展比较稳定，但我还年轻，希望有更大的挑战和更多的学习机会。

你会选择创业公司还是像BAT那样的大公司，为什么？
  创业公挑战大，享受挑战；创业公司具有无限成功的可能性，想随公司一起成长；
  
