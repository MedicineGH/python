选择排序
  属于选择排序
  两两比较大小，找出极值（极大值或极小值）被放置在固定的位置，这个固定位置一般指的是某一端。
  结果分为升序和降序排列
降序
  n个数从左至右，索引从0开始到n-1，两两一次比较，记录大值索引，此轮所有树比较完毕，将大数和索引0数交换，
  如果大数就是索引1，不交换。第二轮，从1开始比较，找到最大值，将它和索引1位置交换，如果它就在索引1位置
  则不交换，依次类推，每次左边都会固定下一个大数。
升序
  和降序相反
  
  简单选择排序
  m_list = [
    [1,9,8,5,6,7,4,3,2],
    [1,2,3,4,5,6,7,8,9],
    [9,8,7,6,5,4,3,2,1]
]

nums = m_list[0]
length = len(nums)
print(nums)

counter = 0
count_swap = 0

for i in range(length):
    maxindex = i
    for j in range(i+1,length):
        counter += 1
        if nums[maxindex] > nums[j]:
            maxindex = j
            
    if i != maxindex:
        nums[i],nums[maxindex] = nums[maxindex],nums[i]
        count_swap += 1
print(nums,count_swap,counter)

改进实现
　　如果一轮比较后，极大值、极小值的值相等，说明比较的序列元素全部相等。
   一下代码会交换2次，最小值两个1交换是没必要的，所以，增加一个判断。
import random

m_list = [
    [i for i in range(1,10)],
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [9, 8, 7, 6, 5, 4, 3, 2, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1]
]

random.shuffle(m_list[0])
nums = m_list[3]
length = len(nums)
print(nums)

count_swap = 0
count_iter = 0
# 二元选择排序
for i in range(length // 2):
    maxindex = i
    minindex = -i - 1
    minorigin = minindex

    for j in range(i + 1, length - i):  # 每次左右都要少比较一个
        count_iter += 1
        if nums[maxindex] > nums[j]:
            maxindex = j
        if nums[minindex] < nums[-j - 1]:
            minindex = -j - 1

    # print(maxindex,minindex)
    if nums[maxindex] == nums[minindex]: #元素相同
        break
        
    if i != maxindex:
        nums[i],nums[maxindex] = nums[maxindex],nums[i]
        count_swap += 1
        # 如果最小值被交换过，要更新索引
        if i == minindex or i == length + minindex: #由于使用了负索引
            minindex = maxindex

    #最小值索引不同，但值相同就没有必要交换了
    if minorigin != minindex and nums[minorigin] != nums[minindex]:
        nums[minorigin],nums[minindex] = nums[minindex],nums[minorigin]
        count_swap += 1

print(nums, count_swap, count_iter)
