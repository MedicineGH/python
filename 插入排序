                                            python-插入排序

直接插入排序原理

　　在未排序序列中，构建一个子排序序列，也就是说有序区和无序区的问题，直至全部数据排序完成

　　将无序区的数，插入到已经排序的序列中合适的位置

　　增加一个哨兵，因为它怕你迭代越界，放入待比较值，让它和后面已经排好序的序列比较，找到合适的插入点

直接插入排序Direct insertion sort

初始    [0 1 9 8 5 6]
第一趟  [9 1 9 8 5 6]
第二趟  [8 1 9 8 5 6] [8 1 ?->9 5 6] [8 1 8 9 5 6]
第三趟  [5 1 8 9 5 6] [5 1 8 9->9 6] [5 1 ?->8 9 6] [5 1 5 8 9 6]
第四趟  [6 1 5 8 9 6] [6 1 5 8 9->9] [6 1 5 ?->8 9] [6 1 5 6 8 9]
　　开头的红色数字为哨兵，即待插入值

　　从第二个数字开始排序即9

　　第一趟，哨兵9，1和哨兵比较，1小，哨兵插入，本轮比较结束

　　第二趟，哨兵8，9和哨兵比较，大于哨兵9右移，1和哨兵比较，1小，哨兵插入本轮比较结束

　　以此类推，直至把最后一个数字放到哨兵并比较，插入完成

直接插入排序

　　增加一个哨兵位，每轮比较将待比较数放入

　　哨兵一次和待比较数的前一个数据比较，大数靠右移动，找到哨兵中值的插入位置

　　每一轮结束后，得到一个从开始到待比较数位置的一个有序序列

代码实现：
m_list = [
    [1,9,8,5,6,7,4,3,2],[1,2,3,4,5,6,7,8,9],
    [9,8,7,6,5,4,3,2,1],[1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,2]
]

#nums = [0,1,9,8,5,6]
nums = [0] + m_list[0]
sentinel,*origin = nums #哨兵位，待比较数字
print(sentinel,origin)

length = len(nums)
for i in range(2,length): #3,一为哨兵，二为有序区不用动
    nums[0] = nums[i] #放置哨兵
    j = i - 1 #有序区索引数
    if nums[j] > nums[0]: #有序区数和哨兵比较
        while nums[j] > nums[0]:
            nums[j+1] = nums[j] #大数右移，找到插入位置
            j -= 1 #哨兵插入位置的索引
        nums[j+1] = nums[0] #将哨兵插入，注意插入在右侧要+1

print(nums)

总结：

　　最好情况，正好是升序排序，比较迭代n-1次

　　最差情况，是降序排列，比较迭代1，2,....,n-1即n(n-1)/2

　　使用两层嵌套循环，时间复杂度O(n^2)

　　稳定排序算法

　　　　如果是两个1在列表中两个1一样么？只能说你们叫数值相等，在列表中所谓相同，就是在同一位置上的元素这才叫相同的，不同位置上的两个这叫不同元素与set不一样set就去重的。
　　什么是稳定?：如果两个数一样的你在它左边，在这种排序算法调整完之后，你一定还在它左边，这叫稳定的，虽然它们数值相同但是不同对象

　　使用在小规模数据比较

　　优化：大多的时间都是在作比较，也就是说用哨兵数值在有序区挨个比较，虽然是从右到左，但是在比较的过程如果发现这个值恰好在最左边，假如拿到的值是1右边的全要移动啊，假如1-1000的数据碰到1都要移动，比1大都要移动，所以这个效率还是蛮低下的，所以不太适合，既然前面是有序区比较的话，有序就可以采用二分查找来极高效率，即二分查找插入排序

　　所以大规模数据我们就要提速了，最好的优化点就在于有序区使用二分查找方式来解决，但二分法跟树结构是有关系的

　　二分是放在跟有序区比较的时候用二分的方式


